{"ast":null,"code":"import axios from 'axios';\nimport { all, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, LIKE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, RETWEET_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\nfunction retweetAPI(data) {\n  return axios.post(`/post/${data}/retweet`);\n}\nfunction* retweet(action) {\n  try {\n    const result = yield call(retweetAPI, action.data);\n    yield put({\n      type: RETWEET_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: RETWEET_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction uploadImagesAPI(data) {\n  return axios.post('/post/images', data);\n}\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`);\n}\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction loadPostsAPI(lastId) {\n  return axios.get(`/posts?lastId=${lastId || 0}`);\n}\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.lastId);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction addPostAPI(data) {\n  return axios.post('/post', data);\n}\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction removePostAPI(data) {\n  return axios.delete(`/post/${data}`);\n}\nfunction* removePost(action) {\n  try {\n    const result = yield call(removePostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data); // POST /post/1/comment\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n}\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nexport default function* postSaga() {\n  yield all([fork(watchRetweet), fork(watchUploadImages), fork(watchLikePost), fork(watchUnlikePost), fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"names":["axios","all","fork","put","takeLatest","throttle","call","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","LIKE_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","RETWEET_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","UNLIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UPLOAD_IMAGES_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","retweetAPI","data","post","retweet","action","result","type","err","console","error","response","uploadImagesAPI","uploadImages","likePostAPI","patch","likePost","unlikePostAPI","delete","unlikePost","loadPostsAPI","lastId","get","loadPosts","addPostAPI","addPost","id","removePostAPI","removePost","addCommentAPI","postId","addComment","watchRetweet","watchUploadImages","watchLikePost","watchUnlikePost","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"sources":["C:/Users/LG/Desktop/GitHub/FRONT-END/Redux-study/prepare/front/sagas/post.js"],"sourcesContent":["import axios from 'axios';\r\nimport { all, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\r\n\r\nimport {\r\n  ADD_COMMENT_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS, LIKE_POST_FAILURE,\r\n  LIKE_POST_REQUEST, LIKE_POST_SUCCESS,\r\n  LOAD_POSTS_FAILURE,\r\n  LOAD_POSTS_REQUEST,\r\n  LOAD_POSTS_SUCCESS,\r\n  REMOVE_POST_FAILURE,\r\n  REMOVE_POST_REQUEST,\r\n  REMOVE_POST_SUCCESS, RETWEET_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, UNLIKE_POST_FAILURE,\r\n  UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS,\r\n  UPLOAD_IMAGES_FAILURE,\r\n  UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS,\r\n} from '../reducers/post';\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\nfunction retweetAPI(data) {\r\n  return axios.post(`/post/${data}/retweet`);\r\n}\r\n\r\nfunction* retweet(action) {\r\n  try {\r\n    const result = yield call(retweetAPI, action.data);\r\n    yield put({\r\n      type: RETWEET_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: RETWEET_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction uploadImagesAPI(data) {\r\n  return axios.post('/post/images', data);\r\n}\r\n\r\nfunction* uploadImages(action) {\r\n  try {\r\n    const result = yield call(uploadImagesAPI, action.data);\r\n    yield put({\r\n      type: UPLOAD_IMAGES_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: UPLOAD_IMAGES_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction likePostAPI(data) {\r\n  return axios.patch(`/post/${data}/like`);\r\n}\r\n\r\nfunction* likePost(action) {\r\n  try {\r\n    const result = yield call(likePostAPI, action.data);\r\n    yield put({\r\n      type: LIKE_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LIKE_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction unlikePostAPI(data) {\r\n  return axios.delete(`/post/${data}/like`);\r\n}\r\n\r\nfunction* unlikePost(action) {\r\n  try {\r\n    const result = yield call(unlikePostAPI, action.data);\r\n    yield put({\r\n      type: UNLIKE_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: UNLIKE_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction loadPostsAPI(lastId) {\r\n  return axios.get(`/posts?lastId=${lastId || 0}`);\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n  try {\r\n    const result = yield call(loadPostsAPI, action.lastId);\r\n    yield put({\r\n      type: LOAD_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LOAD_POSTS_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post('/post', data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    const result = yield call(addPostAPI, action.data);\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: result.data.id,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n  return axios.delete(`/post/${data}`);\r\n}\r\n\r\nfunction* removePost(action) {\r\n  try {\r\n    const result = yield call(removePostAPI, action.data);\r\n    yield put({\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n    yield put({\r\n      type: REMOVE_POST_OF_ME,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n  return axios.post(`/post/${data.postId}/comment`, data); // POST /post/1/comment\r\n}\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    const result = yield call(addCommentAPI, action.data);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchRetweet() {\r\n  yield takeLatest(RETWEET_REQUEST, retweet);\r\n}\r\n\r\nfunction* watchUploadImages() {\r\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\n\r\nfunction* watchLikePost() {\r\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\n\r\nfunction* watchUnlikePost() {\r\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchRetweet),\r\n    fork(watchUploadImages),\r\n    fork(watchLikePost),\r\n    fork(watchUnlikePost),\r\n    fork(watchAddPost),\r\n    fork(watchLoadPosts),\r\n    fork(watchRemovePost),\r\n    fork(watchAddComment),\r\n  ]);\r\n}\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,GAAG,EAAEC,IAAI,EAAEC,GAAG,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,IAAI,QAAQ,oBAAoB;AAE/E,SACEC,mBAAmB,EACnBC,mBAAmB,EACnBC,mBAAmB,EACnBC,gBAAgB,EAChBC,gBAAgB,EAChBC,gBAAgB,EAAEC,iBAAiB,EACnCC,iBAAiB,EAAEC,iBAAiB,EACpCC,kBAAkB,EAClBC,kBAAkB,EAClBC,kBAAkB,EAClBC,mBAAmB,EACnBC,mBAAmB,EACnBC,mBAAmB,EAAEC,eAAe,EAAEC,eAAe,EAAEC,eAAe,EAAEC,mBAAmB,EAC3FC,mBAAmB,EAAEC,mBAAmB,EACxCC,qBAAqB,EACrBC,qBAAqB,EAAEC,qBAAqB,QACvC,kBAAkB;AACzB,SAASC,cAAc,EAAEC,iBAAiB,QAAQ,kBAAkB;AAEpE,SAASC,UAAU,CAACC,IAAI,EAAE;EACxB,OAAOlC,KAAK,CAACmC,IAAI,CAAE,SAAQD,IAAK,UAAS,CAAC;AAC5C;AAEA,UAAUE,OAAO,CAACC,MAAM,EAAE;EACxB,IAAI;IACF,MAAMC,MAAM,GAAG,MAAMhC,IAAI,CAAC2B,UAAU,EAAEI,MAAM,CAACH,IAAI,CAAC;IAClD,MAAM/B,GAAG,CAAC;MACRoC,IAAI,EAAEf,eAAe;MACrBU,IAAI,EAAEI,MAAM,CAACJ;IACf,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOM,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;IAClB,MAAMrC,GAAG,CAAC;MACRoC,IAAI,EAAEjB,eAAe;MACrBoB,KAAK,EAAEF,GAAG,CAACG,QAAQ,CAACT;IACtB,CAAC,CAAC;EACJ;AACF;AAEA,SAASU,eAAe,CAACV,IAAI,EAAE;EAC7B,OAAOlC,KAAK,CAACmC,IAAI,CAAC,cAAc,EAAED,IAAI,CAAC;AACzC;AAEA,UAAUW,YAAY,CAACR,MAAM,EAAE;EAC7B,IAAI;IACF,MAAMC,MAAM,GAAG,MAAMhC,IAAI,CAACsC,eAAe,EAAEP,MAAM,CAACH,IAAI,CAAC;IACvD,MAAM/B,GAAG,CAAC;MACRoC,IAAI,EAAET,qBAAqB;MAC3BI,IAAI,EAAEI,MAAM,CAACJ;IACf,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOM,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;IAClB,MAAMrC,GAAG,CAAC;MACRoC,IAAI,EAAEX,qBAAqB;MAC3Bc,KAAK,EAAEF,GAAG,CAACG,QAAQ,CAACT;IACtB,CAAC,CAAC;EACJ;AACF;AAEA,SAASY,WAAW,CAACZ,IAAI,EAAE;EACzB,OAAOlC,KAAK,CAAC+C,KAAK,CAAE,SAAQb,IAAK,OAAM,CAAC;AAC1C;AAEA,UAAUc,QAAQ,CAACX,MAAM,EAAE;EACzB,IAAI;IACF,MAAMC,MAAM,GAAG,MAAMhC,IAAI,CAACwC,WAAW,EAAET,MAAM,CAACH,IAAI,CAAC;IACnD,MAAM/B,GAAG,CAAC;MACRoC,IAAI,EAAExB,iBAAiB;MACvBmB,IAAI,EAAEI,MAAM,CAACJ;IACf,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOM,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;IAClB,MAAMrC,GAAG,CAAC;MACRoC,IAAI,EAAE1B,iBAAiB;MACvB6B,KAAK,EAAEF,GAAG,CAACG,QAAQ,CAACT;IACtB,CAAC,CAAC;EACJ;AACF;AAEA,SAASe,aAAa,CAACf,IAAI,EAAE;EAC3B,OAAOlC,KAAK,CAACkD,MAAM,CAAE,SAAQhB,IAAK,OAAM,CAAC;AAC3C;AAEA,UAAUiB,UAAU,CAACd,MAAM,EAAE;EAC3B,IAAI;IACF,MAAMC,MAAM,GAAG,MAAMhC,IAAI,CAAC2C,aAAa,EAAEZ,MAAM,CAACH,IAAI,CAAC;IACrD,MAAM/B,GAAG,CAAC;MACRoC,IAAI,EAAEZ,mBAAmB;MACzBO,IAAI,EAAEI,MAAM,CAACJ;IACf,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOM,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;IAClB,MAAMrC,GAAG,CAAC;MACRoC,IAAI,EAAEd,mBAAmB;MACzBiB,KAAK,EAAEF,GAAG,CAACG,QAAQ,CAACT;IACtB,CAAC,CAAC;EACJ;AACF;AAEA,SAASkB,YAAY,CAACC,MAAM,EAAE;EAC5B,OAAOrD,KAAK,CAACsD,GAAG,CAAE,iBAAgBD,MAAM,IAAI,CAAE,EAAC,CAAC;AAClD;AAEA,UAAUE,SAAS,CAAClB,MAAM,EAAE;EAC1B,IAAI;IACF,MAAMC,MAAM,GAAG,MAAMhC,IAAI,CAAC8C,YAAY,EAAEf,MAAM,CAACgB,MAAM,CAAC;IACtD,MAAMlD,GAAG,CAAC;MACRoC,IAAI,EAAErB,kBAAkB;MACxBgB,IAAI,EAAEI,MAAM,CAACJ;IACf,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOM,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;IAClB,MAAMrC,GAAG,CAAC;MACRoC,IAAI,EAAEvB,kBAAkB;MACxB0B,KAAK,EAAEF,GAAG,CAACG,QAAQ,CAACT;IACtB,CAAC,CAAC;EACJ;AACF;AAEA,SAASsB,UAAU,CAACtB,IAAI,EAAE;EACxB,OAAOlC,KAAK,CAACmC,IAAI,CAAC,OAAO,EAAED,IAAI,CAAC;AAClC;AAEA,UAAUuB,OAAO,CAACpB,MAAM,EAAE;EACxB,IAAI;IACF,MAAMC,MAAM,GAAG,MAAMhC,IAAI,CAACkD,UAAU,EAAEnB,MAAM,CAACH,IAAI,CAAC;IAClD,MAAM/B,GAAG,CAAC;MACRoC,IAAI,EAAE3B,gBAAgB;MACtBsB,IAAI,EAAEI,MAAM,CAACJ;IACf,CAAC,CAAC;IACF,MAAM/B,GAAG,CAAC;MACRoC,IAAI,EAAER,cAAc;MACpBG,IAAI,EAAEI,MAAM,CAACJ,IAAI,CAACwB;IACpB,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOlB,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;IAClB,MAAMrC,GAAG,CAAC;MACRoC,IAAI,EAAE7B,gBAAgB;MACtBgC,KAAK,EAAEF,GAAG,CAACG,QAAQ,CAACT;IACtB,CAAC,CAAC;EACJ;AACF;AAEA,SAASyB,aAAa,CAACzB,IAAI,EAAE;EAC3B,OAAOlC,KAAK,CAACkD,MAAM,CAAE,SAAQhB,IAAK,EAAC,CAAC;AACtC;AAEA,UAAU0B,UAAU,CAACvB,MAAM,EAAE;EAC3B,IAAI;IACF,MAAMC,MAAM,GAAG,MAAMhC,IAAI,CAACqD,aAAa,EAAEtB,MAAM,CAACH,IAAI,CAAC;IACrD,MAAM/B,GAAG,CAAC;MACRoC,IAAI,EAAElB,mBAAmB;MACzBa,IAAI,EAAEI,MAAM,CAACJ;IACf,CAAC,CAAC;IACF,MAAM/B,GAAG,CAAC;MACRoC,IAAI,EAAEP,iBAAiB;MACvBE,IAAI,EAAEG,MAAM,CAACH;IACf,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOM,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;IAClB,MAAMrC,GAAG,CAAC;MACRoC,IAAI,EAAEpB,mBAAmB;MACzBuB,KAAK,EAAEF,GAAG,CAACG,QAAQ,CAACT;IACtB,CAAC,CAAC;EACJ;AACF;AAEA,SAAS2B,aAAa,CAAC3B,IAAI,EAAE;EAC3B,OAAOlC,KAAK,CAACmC,IAAI,CAAE,SAAQD,IAAI,CAAC4B,MAAO,UAAS,EAAE5B,IAAI,CAAC,CAAC,CAAC;AAC3D;;AAEA,UAAU6B,UAAU,CAAC1B,MAAM,EAAE;EAC3B,IAAI;IACF,MAAMC,MAAM,GAAG,MAAMhC,IAAI,CAACuD,aAAa,EAAExB,MAAM,CAACH,IAAI,CAAC;IACrD,MAAM/B,GAAG,CAAC;MACRoC,IAAI,EAAE9B,mBAAmB;MACzByB,IAAI,EAAEI,MAAM,CAACJ;IACf,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOM,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;IAClB,MAAMrC,GAAG,CAAC;MACRoC,IAAI,EAAEhC,mBAAmB;MACzBmC,KAAK,EAAEF,GAAG,CAACG,QAAQ,CAACT;IACtB,CAAC,CAAC;EACJ;AACF;AAEA,UAAU8B,YAAY,GAAG;EACvB,MAAM5D,UAAU,CAACmB,eAAe,EAAEa,OAAO,CAAC;AAC5C;AAEA,UAAU6B,iBAAiB,GAAG;EAC5B,MAAM7D,UAAU,CAACyB,qBAAqB,EAAEgB,YAAY,CAAC;AACvD;AAEA,UAAUqB,aAAa,GAAG;EACxB,MAAM9D,UAAU,CAACU,iBAAiB,EAAEkC,QAAQ,CAAC;AAC/C;AAEA,UAAUmB,eAAe,GAAG;EAC1B,MAAM/D,UAAU,CAACsB,mBAAmB,EAAEyB,UAAU,CAAC;AACnD;AAEA,UAAUiB,cAAc,GAAG;EACzB,MAAM/D,QAAQ,CAAC,IAAI,EAAEY,kBAAkB,EAAEsC,SAAS,CAAC;AACrD;AAEA,UAAUc,YAAY,GAAG;EACvB,MAAMjE,UAAU,CAACO,gBAAgB,EAAE8C,OAAO,CAAC;AAC7C;AAEA,UAAUa,eAAe,GAAG;EAC1B,MAAMlE,UAAU,CAACgB,mBAAmB,EAAEwC,UAAU,CAAC;AACnD;AAEA,UAAUW,eAAe,GAAG;EAC1B,MAAMnE,UAAU,CAACI,mBAAmB,EAAEuD,UAAU,CAAC;AACnD;AAEA,eAAe,UAAUS,QAAQ,GAAG;EAClC,MAAMvE,GAAG,CAAC,CACRC,IAAI,CAAC8D,YAAY,CAAC,EAClB9D,IAAI,CAAC+D,iBAAiB,CAAC,EACvB/D,IAAI,CAACgE,aAAa,CAAC,EACnBhE,IAAI,CAACiE,eAAe,CAAC,EACrBjE,IAAI,CAACmE,YAAY,CAAC,EAClBnE,IAAI,CAACkE,cAAc,CAAC,EACpBlE,IAAI,CAACoE,eAAe,CAAC,EACrBpE,IAAI,CAACqE,eAAe,CAAC,CACtB,CAAC;AACJ"},"metadata":{},"sourceType":"module"}