{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LG\\\\Desktop\\\\GitHub\\\\FRONT-END\\\\Redux-study\\\\prepare\\\\front\\\\pages\\\\index.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport AppLayout from '../components/AppLayout';\nimport PostForm from '../components/PostForm';\nimport PostCard from '../components/PostCard';\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Home() {\n  _s();\n  var _this = this;\n  var dispatch = useDispatch();\n\n  // useSelector를 사용해 redux에 있는 상태 가져오기\n  var _useSelector = useSelector(function (state) {\n      return state.user;\n    }),\n    me = _useSelector.me;\n  var _useSelector2 = useSelector(function (state) {\n      return state.post;\n    }),\n    mainPosts = _useSelector2.mainPosts,\n    hasMorePosts = _useSelector2.hasMorePosts,\n    loadPostsLoading = _useSelector2.loadPostsLoading;\n  useEffect(function () {\n    function onScroll() {\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (hasMorePosts && !loadPostsLoading) {\n          var _mainPosts;\n          var lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id;\n          dispatch({\n            type: LOAD_POSTS_REQUEST,\n            lastId: lastId\n          });\n        }\n      }\n    }\n    window.addEventListener('scroll', onScroll);\n    return function () {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [hasMorePosts, loadPostsLoading, mainPosts]);\n  return /*#__PURE__*/_jsxDEV(AppLayout, {\n    children: [me && /*#__PURE__*/_jsxDEV(PostForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 14\n    }, this), mainPosts.map(function (post) {\n      return /*#__PURE__*/_jsxDEV(PostCard, {\n        post: post,\n        children: ' '\n      }, post.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, _this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n_s(Home, \"EtRcKjKqxgliZZ4TyxHuHDK2qiI=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c = Home;\n// 화면을 그리기 전에 실행됨\nexport var __N_SSP = true;\nexport default Home;\n\n// next가 pages 폴더를 인식해서 이걸 다 page component로 만들어줌\n// code spliting된 page로 만들어주는거임\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useEffect","useSelector","useDispatch","AppLayout","PostForm","PostCard","LOAD_POSTS_REQUEST","Home","dispatch","state","user","me","post","mainPosts","hasMorePosts","loadPostsLoading","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","lastId","length","id","type","addEventListener","removeEventListener","map"],"sources":["C:/Users/LG/Desktop/GitHub/FRONT-END/Redux-study/prepare/front/pages/index.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { END } from 'redux-saga';\r\nimport AppLayout from '../components/AppLayout';\r\nimport PostForm from '../components/PostForm';\r\nimport PostCard from '../components/PostCard';\r\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\r\nimport { LOAD_USER_REQUEST } from '../reducers/user';\r\nimport wrapper from '../store/configureStore';\r\n\r\nfunction Home() {\r\n  const dispatch = useDispatch();\r\n\r\n  // useSelector를 사용해 redux에 있는 상태 가져오기\r\n  const { me } = useSelector((state) => state.user);\r\n  const { mainPosts, hasMorePosts, loadPostsLoading } = useSelector(\r\n    (state) => state.post,\r\n  );\r\n\r\n  useEffect(() => {\r\n    function onScroll() {\r\n      if (\r\n        window.scrollY + document.documentElement.clientHeight\r\n        > document.documentElement.scrollHeight - 300\r\n      ) {\r\n        if (hasMorePosts && !loadPostsLoading) {\r\n          const lastId = mainPosts[mainPosts.length - 1]?.id;\r\n          dispatch({\r\n            type: LOAD_POSTS_REQUEST,\r\n            lastId,\r\n          });\r\n        }\r\n      }\r\n    }\r\n    window.addEventListener('scroll', onScroll);\r\n    return () => {\r\n      window.removeEventListener('scroll', onScroll);\r\n    };\r\n  }, [hasMorePosts, loadPostsLoading, mainPosts]);\r\n\r\n  return (\r\n    <AppLayout>\r\n      {/* 게시물 작성 폼은 로그인한 사용자에게만 보이게 한다. */}\r\n      {me && <PostForm />}\r\n      {mainPosts.map((post) => (\r\n        <PostCard key={post.id} post={post}>{' '}</PostCard>\r\n      ))}\r\n    </AppLayout>\r\n  );\r\n}\r\n\r\nexport const getServerSideProps = wrapper.getServerSideProps(\r\n  async (context) => {\r\n    context.store.dispatch({\r\n      type: LOAD_USER_REQUEST,\r\n    });\r\n    context.store.dispatch({\r\n      type: LOAD_POSTS_REQUEST,\r\n    });\r\n    context.store.dispatch(END);\r\n    await context.store.sagaTask.toPromise();\r\n  },\r\n);\r\n// 화면을 그리기 전에 실행됨\r\n\r\nexport default Home;\r\n\r\n// next가 pages 폴더를 인식해서 이걸 다 page component로 만들어줌\r\n// code spliting된 page로 만들어주는거임\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AAEtD,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C,SAASC,kBAAkB,QAAQ,kBAAkB;AAAC;AAItD,SAASC,IAAI,GAAG;EAAA;EAAA;EACd,IAAMC,QAAQ,GAAGN,WAAW,EAAE;;EAE9B;EACA,mBAAeD,WAAW,CAAC,UAACQ,KAAK;MAAA,OAAKA,KAAK,CAACC,IAAI;IAAA,EAAC;IAAzCC,EAAE,gBAAFA,EAAE;EACV,oBAAsDV,WAAW,CAC/D,UAACQ,KAAK;MAAA,OAAKA,KAAK,CAACG,IAAI;IAAA,EACtB;IAFOC,SAAS,iBAATA,SAAS;IAAEC,YAAY,iBAAZA,YAAY;IAAEC,gBAAgB,iBAAhBA,gBAAgB;EAIjDf,SAAS,CAAC,YAAM;IACd,SAASgB,QAAQ,GAAG;MAClB,IACEC,MAAM,CAACC,OAAO,GAAGC,QAAQ,CAACC,eAAe,CAACC,YAAY,GACpDF,QAAQ,CAACC,eAAe,CAACE,YAAY,GAAG,GAAG,EAC7C;QACA,IAAIR,YAAY,IAAI,CAACC,gBAAgB,EAAE;UAAA;UACrC,IAAMQ,MAAM,iBAAGV,SAAS,CAACA,SAAS,CAACW,MAAM,GAAG,CAAC,CAAC,+CAA/B,WAAiCC,EAAE;UAClDjB,QAAQ,CAAC;YACPkB,IAAI,EAAEpB,kBAAkB;YACxBiB,MAAM,EAANA;UACF,CAAC,CAAC;QACJ;MACF;IACF;IACAN,MAAM,CAACU,gBAAgB,CAAC,QAAQ,EAAEX,QAAQ,CAAC;IAC3C,OAAO,YAAM;MACXC,MAAM,CAACW,mBAAmB,CAAC,QAAQ,EAAEZ,QAAQ,CAAC;IAChD,CAAC;EACH,CAAC,EAAE,CAACF,YAAY,EAAEC,gBAAgB,EAAEF,SAAS,CAAC,CAAC;EAE/C,oBACE,QAAC,SAAS;IAAA,WAEPF,EAAE,iBAAI,QAAC,QAAQ;MAAA;MAAA;MAAA;IAAA,QAAG,EAClBE,SAAS,CAACgB,GAAG,CAAC,UAACjB,IAAI;MAAA,oBAClB,QAAC,QAAQ;QAAe,IAAI,EAAEA,IAAK;QAAA,UAAE;MAAG,GAAzBA,IAAI,CAACa,EAAE;QAAA;QAAA;QAAA;MAAA,SAA8B;IAAA,CACrD,CAAC;EAAA;IAAA;IAAA;IAAA;EAAA,QACQ;AAEhB;AAAC,GAvCQlB,IAAI;EAAA,QACML,WAAW,EAGbD,WAAW,EAC4BA,WAAW;AAAA;AAAA,KAL1DM,IAAI;AAqDb;AAAA;AAEA,eAAeA,IAAI;;AAEnB;AACA;AAAA;AAAA"},"metadata":{},"sourceType":"module"}