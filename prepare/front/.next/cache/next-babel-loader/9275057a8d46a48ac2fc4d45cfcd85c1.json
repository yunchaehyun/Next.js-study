{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LG\\\\Desktop\\\\GitHub\\\\FRONT-END\\\\Redux-study\\\\prepare\\\\front\\\\pages\\\\index.js\";\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { END } from 'redux-saga';\nimport axios from 'axios';\nimport AppLayout from '../components/AppLayout';\nimport PostForm from '../components/PostForm';\nimport PostCard from '../components/PostCard';\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\nimport { LOAD_MY_INFO_REQUEST } from '../reducers/user';\nimport wrapper from '../store/configureStore';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Home() {\n  const dispatch = useDispatch();\n\n  // useSelector를 사용해 redux에 있는 상태 가져오기\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    mainPosts,\n    hasMorePosts,\n    loadPostsLoading\n  } = useSelector(state => state.post);\n  useEffect(() => {\n    function onScroll() {\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (hasMorePosts && !loadPostsLoading) {\n          var _mainPosts;\n          const lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id;\n          dispatch({\n            type: LOAD_POSTS_REQUEST,\n            lastId\n          });\n        }\n      }\n    }\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [hasMorePosts, loadPostsLoading, mainPosts]);\n  return /*#__PURE__*/_jsxDEV(AppLayout, {\n    children: [me && /*#__PURE__*/_jsxDEV(PostForm, {\n      children: ' '\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 14\n    }, this), mainPosts.map(post => /*#__PURE__*/_jsxDEV(PostCard, {\n      post: post,\n      children: ' '\n    }, post.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  const cookie = context.req ? context.req.headers.cookie : '';\n  axios.defaults.headers.Cookie = cookie;\n  console.log(context.req.headers);\n  context.store.dispatch({\n    type: LOAD_POSTS_REQUEST\n  });\n  context.store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  context.store.dispatch(END);\n  console.log('getServerSideProps end');\n  await context.store.sagaTask.toPromise();\n});\n// 화면을 그리기 전에 실행됨\n\nexport default Home;\n\n// next가 pages 폴더를 인식해서 이걸 다 page component로 만들어줌\n// code spliting된 page로 만들어주는거임","map":{"version":3,"names":["React","useEffect","useSelector","useDispatch","END","axios","AppLayout","PostForm","PostCard","LOAD_POSTS_REQUEST","LOAD_MY_INFO_REQUEST","wrapper","Home","dispatch","me","state","user","mainPosts","hasMorePosts","loadPostsLoading","post","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","lastId","length","id","type","addEventListener","removeEventListener","map","getServerSideProps","context","cookie","req","headers","defaults","Cookie","console","log","store","sagaTask","toPromise"],"sources":["C:/Users/LG/Desktop/GitHub/FRONT-END/Redux-study/prepare/front/pages/index.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { END } from 'redux-saga';\r\nimport axios from 'axios';\r\nimport AppLayout from '../components/AppLayout';\r\nimport PostForm from '../components/PostForm';\r\nimport PostCard from '../components/PostCard';\r\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\r\nimport { LOAD_MY_INFO_REQUEST } from '../reducers/user';\r\nimport wrapper from '../store/configureStore';\r\n\r\nfunction Home() {\r\n  const dispatch = useDispatch();\r\n\r\n  // useSelector를 사용해 redux에 있는 상태 가져오기\r\n  const { me } = useSelector((state) => state.user);\r\n  const { mainPosts, hasMorePosts, loadPostsLoading } = useSelector(\r\n    (state) => state.post,\r\n  );\r\n\r\n  useEffect(() => {\r\n    function onScroll() {\r\n      if (\r\n        window.scrollY + document.documentElement.clientHeight\r\n        > document.documentElement.scrollHeight - 300\r\n      ) {\r\n        if (hasMorePosts && !loadPostsLoading) {\r\n          const lastId = mainPosts[mainPosts.length - 1]?.id;\r\n          dispatch({\r\n            type: LOAD_POSTS_REQUEST,\r\n            lastId,\r\n          });\r\n        }\r\n      }\r\n    }\r\n    window.addEventListener('scroll', onScroll);\r\n    return () => {\r\n      window.removeEventListener('scroll', onScroll);\r\n    };\r\n  }, [hasMorePosts, loadPostsLoading, mainPosts]);\r\n\r\n  return (\r\n    <AppLayout>\r\n      {/* 게시물 작성 폼은 로그인한 사용자에게만 보이게 한다. */}\r\n      {me && <PostForm>{' '}</PostForm>}\r\n      {mainPosts.map((post) => (\r\n        <PostCard key={post.id} post={post}>{' '}</PostCard>\r\n      ))}\r\n    </AppLayout>\r\n  );\r\n}\r\n\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\r\n  const cookie = context.req ? context.req.headers.cookie : '';\r\n  axios.defaults.headers.Cookie = cookie;\r\n  console.log(context.req.headers);\r\n\r\n  context.store.dispatch({\r\n    type: LOAD_POSTS_REQUEST,\r\n  });\r\n  context.store.dispatch({\r\n    type: LOAD_MY_INFO_REQUEST,\r\n  });\r\n  context.store.dispatch(END);\r\n  console.log('getServerSideProps end');\r\n  await context.store.sagaTask.toPromise();\r\n});\r\n// 화면을 그리기 전에 실행됨\r\n\r\nexport default Home;\r\n\r\n// next가 pages 폴더를 인식해서 이걸 다 page component로 만들어줌\r\n// code spliting된 page로 만들어주는거임\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}