{"ast":null,"code":"import shortId from 'shortid';\nimport faker from 'faker';\nimport produce from 'immer';\nexport var initialState = {\n  mainPosts: [],\n  singlePost: null,\n  imagePaths: [],\n  hasMorePosts: true,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  loadPostLoading: false,\n  loadPostDone: false,\n  loadPostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  updatePostLoading: false,\n  updatePostDone: false,\n  updatePostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  retweetLoading: false,\n  retweetDone: false,\n  retweetError: null\n};\nexport var UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport var UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport var UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\nexport var LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport var LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport var LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport var UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport var UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport var UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport var LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\nexport var LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\nexport var LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\nexport var LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\nexport var LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\nexport var LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\nexport var LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\nexport var LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\nexport var LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\nexport var LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport var LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport var LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var UPDATE_POST_REQUEST = 'UPDATE_POST_REQUEST';\nexport var UPDATE_POST_SUCCESS = 'UPDATE_POST_SUCCESS';\nexport var UPDATE_POST_FAILURE = 'UPDATE_POST_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport var RETWEET_REQUEST = 'RETWEET_REQUEST';\nexport var RETWEET_SUCCESS = 'RETWEET_SUCCESS';\nexport var RETWEET_FAILURE = 'RETWEET_FAILURE';\nexport var REMOVE_IMAGE = 'REMOVE_IMAGE';\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\n\n// 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case RETWEET_REQUEST:\n        draft.retweetLoading = true;\n        draft.retweetDone = false;\n        draft.retweetError = null;\n        break;\n      case RETWEET_SUCCESS:\n        {\n          draft.retweetLoading = false;\n          draft.retweetDone = true;\n          draft.mainPosts.unshift(action.data);\n          break;\n        }\n      case RETWEET_FAILURE:\n        draft.retweetLoading = false;\n        draft.retweetError = action.error;\n        break;\n      case REMOVE_IMAGE:\n        draft.imagePaths = draft.imagePaths.filter(function (v, i) {\n          return i !== action.data;\n        });\n        break;\n      case UPLOAD_IMAGES_REQUEST:\n        draft.uploadImagesLoading = true;\n        draft.uploadImagesDone = false;\n        draft.uploadImagesError = null;\n        break;\n      case UPLOAD_IMAGES_SUCCESS:\n        {\n          draft.imagePaths = draft.imagePaths.concat(action.data);\n          draft.uploadImagesLoading = false;\n          draft.uploadImagesDone = true;\n          break;\n        }\n      case UPLOAD_IMAGES_FAILURE:\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesError = action.error;\n        break;\n      case LIKE_POST_REQUEST:\n        draft.likePostLoading = true;\n        draft.likePostDone = false;\n        draft.likePostError = null;\n        break;\n      case LIKE_POST_SUCCESS:\n        {\n          var post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n          post.Likers.push({\n            id: action.data.UserId\n          });\n          draft.likePostLoading = false;\n          draft.likePostDone = true;\n          break;\n        }\n      case LIKE_POST_FAILURE:\n        draft.likePostLoading = false;\n        draft.likePostError = action.error;\n        break;\n      case UNLIKE_POST_REQUEST:\n        draft.unlikePostLoading = true;\n        draft.unlikePostDone = false;\n        draft.unlikePostError = null;\n        break;\n      case UNLIKE_POST_SUCCESS:\n        {\n          var _post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n          _post.Likers = _post.Likers.filter(function (v) {\n            return v.id !== action.data.UserId;\n          });\n          draft.unlikePostLoading = false;\n          draft.unlikePostDone = true;\n          break;\n        }\n      case UNLIKE_POST_FAILURE:\n        draft.unlikePostLoading = false;\n        draft.unlikePostError = action.error;\n        break;\n      case LOAD_POST_REQUEST:\n        draft.loadPostLoading = true;\n        draft.loadPostDone = false;\n        draft.loadPostError = null;\n        break;\n      case LOAD_POST_SUCCESS:\n        draft.loadPostLoading = false;\n        draft.loadPostDone = true;\n        draft.singlePost = action.data;\n        break;\n      case LOAD_POST_FAILURE:\n        draft.loadPostLoading = false;\n        draft.loadPostError = action.error;\n        break;\n      case LOAD_USER_POSTS_REQUEST:\n      case LOAD_HASHTAG_POSTS_REQUEST:\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n      case LOAD_USER_POSTS_SUCCESS:\n      case LOAD_HASHTAG_POSTS_SUCCESS:\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts = draft.mainPosts.concat(action.data);\n        draft.hasMorePosts = action.data.length === 10;\n        break;\n      case LOAD_USER_POSTS_FAILURE:\n      case LOAD_HASHTAG_POSTS_FAILURE:\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(action.data);\n        draft.imagePaths = [];\n        break;\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      case UPDATE_POST_REQUEST:\n        draft.updatePostLoading = true;\n        draft.updatePostDone = false;\n        draft.updatePostError = null;\n        break;\n      case UPDATE_POST_SUCCESS:\n        draft.updatePostLoading = false;\n        draft.updatePostDone = true;\n        draft.mainPosts.find(function (v) {\n          return v.id === action.data.PostId;\n        }).content = action.data.content;\n        break;\n      case UPDATE_POST_FAILURE:\n        draft.updatePostLoading = false;\n        draft.updatePostError = action.error;\n        break;\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          return v.id !== action.data.PostId;\n        });\n        break;\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n      case ADD_COMMENT_SUCCESS:\n        {\n          var _post2 = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n          _post2.Comments.unshift(action.data);\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break;\n          // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n          // const post = { ...state.mainPosts[postIndex] };\n          // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n          // const mainPosts = [...state.mainPosts];\n          // mainPosts[postIndex] = post;\n          // return {\n          //   ...state,\n          //   mainPosts,\n          //   addCommentLoading: false,\n          //   addCommentDone: true,\n          // };\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n      default:\n        break;\n    }\n  });\n};\nexport default reducer;","map":{"version":3,"names":["shortId","faker","produce","initialState","mainPosts","singlePost","imagePaths","hasMorePosts","likePostLoading","likePostDone","likePostError","unlikePostLoading","unlikePostDone","unlikePostError","loadPostLoading","loadPostDone","loadPostError","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","updatePostLoading","updatePostDone","updatePostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","uploadImagesLoading","uploadImagesDone","uploadImagesError","retweetLoading","retweetDone","retweetError","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","UPDATE_POST_REQUEST","UPDATE_POST_SUCCESS","UPDATE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","REMOVE_IMAGE","addPost","data","type","addComment","reducer","state","action","draft","unshift","error","filter","v","i","concat","post","find","id","PostId","Likers","push","UserId","length","content","Comments"],"sources":["C:/Users/LG/Desktop/GitHub/FRONT-END/Redux-study/prepare/front/reducers/post.js"],"sourcesContent":["import shortId from 'shortid';\r\nimport faker from 'faker';\r\nimport produce from 'immer';\r\n\r\nexport const initialState = {\r\n  mainPosts: [],\r\n  singlePost: null,\r\n  imagePaths: [],\r\n  hasMorePosts: true,\r\n  likePostLoading: false,\r\n  likePostDone: false,\r\n  likePostError: null,\r\n  unlikePostLoading: false,\r\n  unlikePostDone: false,\r\n  unlikePostError: null,\r\n  loadPostLoading: false,\r\n  loadPostDone: false,\r\n  loadPostError: null,\r\n  loadPostsLoading: false,\r\n  loadPostsDone: false,\r\n  loadPostsError: null,\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  updatePostLoading: false,\r\n  updatePostDone: false,\r\n  updatePostError: null,\r\n  removePostLoading: false,\r\n  removePostDone: false,\r\n  removePostError: null,\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n  uploadImagesLoading: false,\r\n  uploadImagesDone: false,\r\n  uploadImagesError: null,\r\n  retweetLoading: false,\r\n  retweetDone: false,\r\n  retweetError: null,\r\n};\r\n\r\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\r\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\r\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\r\n\r\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\r\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\r\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\r\n\r\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\r\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\r\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\r\n\r\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\r\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\r\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\r\n\r\nexport const LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\r\nexport const LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\r\nexport const LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\r\n\r\nexport const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\r\nexport const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\r\nexport const LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\r\n\r\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\r\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\r\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const UPDATE_POST_REQUEST = 'UPDATE_POST_REQUEST';\r\nexport const UPDATE_POST_SUCCESS = 'UPDATE_POST_SUCCESS';\r\nexport const UPDATE_POST_FAILURE = 'UPDATE_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\r\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\r\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\r\n\r\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\r\n\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\n// 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n  switch (action.type) {\r\n    case RETWEET_REQUEST:\r\n      draft.retweetLoading = true;\r\n      draft.retweetDone = false;\r\n      draft.retweetError = null;\r\n      break;\r\n    case RETWEET_SUCCESS: {\r\n      draft.retweetLoading = false;\r\n      draft.retweetDone = true;\r\n      draft.mainPosts.unshift(action.data);\r\n      break;\r\n    }\r\n    case RETWEET_FAILURE:\r\n      draft.retweetLoading = false;\r\n      draft.retweetError = action.error;\r\n      break;\r\n    case REMOVE_IMAGE:\r\n      draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\r\n      break;\r\n    case UPLOAD_IMAGES_REQUEST:\r\n      draft.uploadImagesLoading = true;\r\n      draft.uploadImagesDone = false;\r\n      draft.uploadImagesError = null;\r\n      break;\r\n    case UPLOAD_IMAGES_SUCCESS: {\r\n      draft.imagePaths = draft.imagePaths.concat(action.data);\r\n      draft.uploadImagesLoading = false;\r\n      draft.uploadImagesDone = true;\r\n      break;\r\n    }\r\n    case UPLOAD_IMAGES_FAILURE:\r\n      draft.uploadImagesLoading = false;\r\n      draft.uploadImagesError = action.error;\r\n      break;\r\n    case LIKE_POST_REQUEST:\r\n      draft.likePostLoading = true;\r\n      draft.likePostDone = false;\r\n      draft.likePostError = null;\r\n      break;\r\n    case LIKE_POST_SUCCESS: {\r\n      const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n      post.Likers.push({ id: action.data.UserId });\r\n      draft.likePostLoading = false;\r\n      draft.likePostDone = true;\r\n      break;\r\n    }\r\n    case LIKE_POST_FAILURE:\r\n      draft.likePostLoading = false;\r\n      draft.likePostError = action.error;\r\n      break;\r\n    case UNLIKE_POST_REQUEST:\r\n      draft.unlikePostLoading = true;\r\n      draft.unlikePostDone = false;\r\n      draft.unlikePostError = null;\r\n      break;\r\n    case UNLIKE_POST_SUCCESS: {\r\n      const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n      post.Likers = post.Likers.filter((v) => v.id !== action.data.UserId);\r\n      draft.unlikePostLoading = false;\r\n      draft.unlikePostDone = true;\r\n      break;\r\n    }\r\n    case UNLIKE_POST_FAILURE:\r\n      draft.unlikePostLoading = false;\r\n      draft.unlikePostError = action.error;\r\n      break;\r\n    case LOAD_POST_REQUEST:\r\n      draft.loadPostLoading = true;\r\n      draft.loadPostDone = false;\r\n      draft.loadPostError = null;\r\n      break;\r\n    case LOAD_POST_SUCCESS:\r\n      draft.loadPostLoading = false;\r\n      draft.loadPostDone = true;\r\n      draft.singlePost = action.data;\r\n      break;\r\n    case LOAD_POST_FAILURE:\r\n      draft.loadPostLoading = false;\r\n      draft.loadPostError = action.error;\r\n      break;\r\n    case LOAD_USER_POSTS_REQUEST:\r\n    case LOAD_HASHTAG_POSTS_REQUEST:\r\n    case LOAD_POSTS_REQUEST:\r\n      draft.loadPostsLoading = true;\r\n      draft.loadPostsDone = false;\r\n      draft.loadPostsError = null;\r\n      break;\r\n    case LOAD_USER_POSTS_SUCCESS:\r\n    case LOAD_HASHTAG_POSTS_SUCCESS:\r\n    case LOAD_POSTS_SUCCESS:\r\n      draft.loadPostsLoading = false;\r\n      draft.loadPostsDone = true;\r\n      draft.mainPosts = draft.mainPosts.concat(action.data);\r\n      draft.hasMorePosts = action.data.length === 10;\r\n      break;\r\n    case LOAD_USER_POSTS_FAILURE:\r\n    case LOAD_HASHTAG_POSTS_FAILURE:\r\n    case LOAD_POSTS_FAILURE:\r\n      draft.loadPostsLoading = false;\r\n      draft.loadPostsError = action.error;\r\n      break;\r\n    case ADD_POST_REQUEST:\r\n      draft.addPostLoading = true;\r\n      draft.addPostDone = false;\r\n      draft.addPostError = null;\r\n      break;\r\n    case ADD_POST_SUCCESS:\r\n      draft.addPostLoading = false;\r\n      draft.addPostDone = true;\r\n      draft.mainPosts.unshift(action.data);\r\n      draft.imagePaths = [];\r\n      break;\r\n    case ADD_POST_FAILURE:\r\n      draft.addPostLoading = false;\r\n      draft.addPostError = action.error;\r\n      break;\r\n    case UPDATE_POST_REQUEST:\r\n      draft.updatePostLoading = true;\r\n      draft.updatePostDone = false;\r\n      draft.updatePostError = null;\r\n      break;\r\n    case UPDATE_POST_SUCCESS:\r\n      draft.updatePostLoading = false;\r\n      draft.updatePostDone = true;\r\n      draft.mainPosts.find((v) => v.id === action.data.PostId).content = action.data.content;\r\n      break;\r\n    case UPDATE_POST_FAILURE:\r\n      draft.updatePostLoading = false;\r\n      draft.updatePostError = action.error;\r\n      break;\r\n    case REMOVE_POST_REQUEST:\r\n      draft.removePostLoading = true;\r\n      draft.removePostDone = false;\r\n      draft.removePostError = null;\r\n      break;\r\n    case REMOVE_POST_SUCCESS:\r\n      draft.removePostLoading = false;\r\n      draft.removePostDone = true;\r\n      draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data.PostId);\r\n      break;\r\n    case REMOVE_POST_FAILURE:\r\n      draft.removePostLoading = false;\r\n      draft.removePostError = action.error;\r\n      break;\r\n    case ADD_COMMENT_REQUEST:\r\n      draft.addCommentLoading = true;\r\n      draft.addCommentDone = false;\r\n      draft.addCommentError = null;\r\n      break;\r\n    case ADD_COMMENT_SUCCESS: {\r\n      const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n      post.Comments.unshift(action.data);\r\n      draft.addCommentLoading = false;\r\n      draft.addCommentDone = true;\r\n      break;\r\n      // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n      // const post = { ...state.mainPosts[postIndex] };\r\n      // post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n      // const mainPosts = [...state.mainPosts];\r\n      // mainPosts[postIndex] = post;\r\n      // return {\r\n      //   ...state,\r\n      //   mainPosts,\r\n      //   addCommentLoading: false,\r\n      //   addCommentDone: true,\r\n      // };\r\n    }\r\n    case ADD_COMMENT_FAILURE:\r\n      draft.addCommentLoading = false;\r\n      draft.addCommentError = action.error;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n});\r\n\r\nexport default reducer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}