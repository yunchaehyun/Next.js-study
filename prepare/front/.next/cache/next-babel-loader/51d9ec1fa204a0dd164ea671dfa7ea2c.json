{"ast":null,"code":"// ../store/configureStore.js\nimport { createWrapper } from 'next-redux-wrapper';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport reducer from '../reducers/index';\nimport rootSaga from '../sagas';\n\n// store : state와 reducer를 포함한 개념이라고 보면 됨\nconst configureStore = () => {\n  // saga middleware 생성\n  const sagaMiddleware = createSagaMiddleware();\n  // middleware 배열안에 saga나 thunk 같은걸 넣음\n  const middlewares = [sagaMiddleware];\n  const enhancer = false ?\n  // 배포용\n  compose(applyMiddleware(...middlewares)) :\n  // 개발용 devtool 연결\n  composeWithDevTools(applyMiddleware(...middlewares));\n  const store = createStore(reducer, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\nconst wrapper = createWrapper(configureStore,\n// 옵션 객체\n{\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"names":["createWrapper","applyMiddleware","compose","createStore","composeWithDevTools","createSagaMiddleware","reducer","rootSaga","configureStore","sagaMiddleware","middlewares","enhancer","store","sagaTask","run","wrapper","debug"],"sources":["C:/Users/LG/Desktop/GitHub/FRONT-END/Redux-study/prepare/front/store/configureStore.js"],"sourcesContent":["// ../store/configureStore.js\r\nimport { createWrapper } from 'next-redux-wrapper';\r\nimport { applyMiddleware, compose, createStore } from 'redux';\r\n\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport createSagaMiddleware from 'redux-saga';\r\n\r\nimport reducer from '../reducers/index';\r\nimport rootSaga from '../sagas';\r\n\r\n// store : state와 reducer를 포함한 개념이라고 보면 됨\r\nconst configureStore = () => {\r\n  // saga middleware 생성\r\n  const sagaMiddleware = createSagaMiddleware();\r\n  // middleware 배열안에 saga나 thunk 같은걸 넣음\r\n  const middlewares = [sagaMiddleware];\r\n  const enhancer = process.env.NODE_ENV === 'production'\r\n    ? // 배포용\r\n    compose(applyMiddleware(...middlewares))\r\n    : // 개발용 devtool 연결\r\n    composeWithDevTools(applyMiddleware(...middlewares));\r\n  const store = createStore(reducer, enhancer);\r\n  store.sagaTask = sagaMiddleware.run(rootSaga);\r\n  return store;\r\n};\r\n\r\nconst wrapper = createWrapper(\r\n  configureStore,\r\n  // 옵션 객체\r\n  { debug: process.env.NODE_ENV === 'development' },\r\n);\r\n\r\nexport default wrapper;\r\n"],"mappings":"AAAA;AACA,SAASA,aAAa,QAAQ,oBAAoB;AAClD,SAASC,eAAe,EAAEC,OAAO,EAAEC,WAAW,QAAQ,OAAO;AAE7D,SAASC,mBAAmB,QAAQ,0BAA0B;AAC9D,OAAOC,oBAAoB,MAAM,YAAY;AAE7C,OAAOC,OAAO,MAAM,mBAAmB;AACvC,OAAOC,QAAQ,MAAM,UAAU;;AAE/B;AACA,MAAMC,cAAc,GAAG,MAAM;EAC3B;EACA,MAAMC,cAAc,GAAGJ,oBAAoB,EAAE;EAC7C;EACA,MAAMK,WAAW,GAAG,CAACD,cAAc,CAAC;EACpC,MAAME,QAAQ,GAAG;EACb;EACFT,OAAO,CAACD,eAAe,CAAC,GAAGS,WAAW,CAAC,CAAC;EACtC;EACFN,mBAAmB,CAACH,eAAe,CAAC,GAAGS,WAAW,CAAC,CAAC;EACtD,MAAME,KAAK,GAAGT,WAAW,CAACG,OAAO,EAAEK,QAAQ,CAAC;EAC5CC,KAAK,CAACC,QAAQ,GAAGJ,cAAc,CAACK,GAAG,CAACP,QAAQ,CAAC;EAC7C,OAAOK,KAAK;AACd,CAAC;AAED,MAAMG,OAAO,GAAGf,aAAa,CAC3BQ,cAAc;AACd;AACA;EAAEQ,KAAK;AAAyC,CAAC,CAClD;AAED,eAAeD,OAAO"},"metadata":{},"sourceType":"module"}